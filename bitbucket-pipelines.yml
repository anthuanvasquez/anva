# Build configuration for WordPress Theme.
# -----
# Docker image from Docker Hub.
image: smartapps/bitbucket-pipelines-php-mysql

pipelines:
    branches:
        develop:
            - step:
                # Use this to prepare your build for testing.
                # e.g. copy database configurations, environment variables, etc.
                # Failures in this section will result in build status 'errored'.
                script:
                    # Install CodeSniffer for WordPress Coding Standards checks.
                    - mkdir php-codesniffer && curl -L https://github.com/squizlabs/PHP_CodeSniffer/archive/master.tar.gz | tar xz --strip-components=1 -C php-codesniffer
                    # Install WordPress Coding Standards.
                    - mkdir wordpress-coding-standards && curl -L https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/archive/master.tar.gz | tar xz --strip-components=1 -C wordpress-coding-standards
                    # Hop into CodeSniffer directory.
                    - cd php-codesniffer
                    # Set install path for WordPress Coding Standards
                    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
                    - scripts/phpcs --config-set installed_paths ../wordpress-coding-standards
                    # Hop into tools directory.
                    - cd ..
                    - cd .tools
                    # After CodeSniffer install you should refresh your path.
                    # - phpenv rehash
                    # Install node modules
                    - npm install
                    # Running tests.
                    - gulp run-tests
                    # WordPress Coding Standards
                    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
                    # @link http://pear.php.net/package/PHP_CodeSniffer/
                    # -p flag: Show progress of the run.
                    # -s flag: Show sniff codes in all reports.
                    # -v flag: Print verbose output.
                    # -n flag: Do not print warnings (shortcut for --warning-severity=0)
                    # --standard: Use WordPress as the standard.
                    # --extensions: Only sniff PHP files.
                    - cd ..
                    - php-codesniffer/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php
